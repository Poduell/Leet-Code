class Solution {
public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n; // 处理 k 大于数组长度的情况

        // 将数组元素添加到队列中
        Queue<Integer> queue = new LinkedList<>();
        for (int i=n-1;i>=0;i--) {
            queue.add(nums[i]);
        }

        // 旋转队列
        for (int i = 0; i < k; i++) {
            int temp = queue.poll();
            queue.add(temp);
        }

        // 将队列中的元素放回数组
        for (int i=n-1;i>=0;i--) {
            nums[i] = queue.poll();
        }
    }
}
//超级石山，用队实现先进先出

/*以下是左旋
class Solution {
public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n; // 处理 k 大于数组长度的情况

        // 将数组元素添加到队列中
        Queue<Integer> queue = new LinkedList<>();
        for (int num : nums) {
            queue.add(num);
        }

        // 旋转队列
        for (int i = 0; i < k; i++) {
            int temp = queue.poll();
            queue.add(temp);
        }

        // 将队列中的元素放回数组
        for (int i = 0; i < n; i++) {
            nums[i] = queue.poll();
        }
    }
}*/
