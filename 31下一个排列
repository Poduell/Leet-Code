public class Solution {

    void nextPermutation(int[] nums) {
        // 其实可以这样思考，因为题目要找下一个排列
        // 那么排序其实有规律的，就像我们枚举排列的时候都是从小到大的
        // 那么其实我们从后往前看，只要找到第一个降序的序列，比如 1 2 3 5 4 的 5 3 是降序的
        // 但找到5 3 之后，我们并不能直接交换5 3的位置，因为这样不是下一个排列
        // 所以我们可以从5到后面的数进行从小到大的排序即4 5，
        // 将这个升序序列中找到第一个大于3的数即4，交换就好了， 得到1 2 4 3 5


        // 其实就是从后往前找，找到第一个降序的序列
        int n = nums.length;
        for(int i = n-1; i >= 1; i--) {
            // 其实可以以 1 2 3 5 4 为例子想
            if(nums[i-1] < nums[i]) {
                // 找到第一个降序之后，将i到n-1从小到大排
                // 又因为i-1到i是我们从后往前找的第一个降序
                // 所以其实i到n-1其实是从大到小的，所以将它从小到大，可以优化处理，直接反转就好了
                reverse(nums, i);  // 直接反转就好
                for(int j = i; j < n; j++) {
                    // i 到 n-1中找到第一个大于i-1的数
                    if(nums[j] > nums[i-1]) {
                        swap(nums, j, i-1);
                        break;
                    }
                }
                break;
            }
            if(i == 1) {
                // 说明是这样的形式 5 4 3 2 1 那么直接反转就好了
                reverse(nums, 0);
            }
        }
    }

    void swap(int[] nums, int l, int r) {
        int tmp = nums[l];
        nums[l] = nums[r];
        nums[r] = tmp;
    }

    void reverse(int[] nums, int l) {
        int r = nums.length-1;
        while(l < r) {
            swap(nums, l, r);
            l++;
             r--;
        }
    }
};
