class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length <= 1) return 0;
        
        int[] dp = new int[prices.length];
        dp[0] = 0;
        List<Integer> profits = new ArrayList<>();
        
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < prices[i-1]) {
                // 当价格下跌时，记录前一个上涨区间的利润
                if (dp[i-1] > 0) {  // 只记录正利润
                    profits.add(dp[i-1]);
                }
                dp[i] = 0;  // 重置当前利润
            } else {
                dp[i] = dp[i-1] + prices[i] - prices[i-1];
            }
        }
        
        // 添加最后一个上涨区间的利润
        if (dp[prices.length-1] > 0) {
            profits.add(dp[prices.length-1]);
        }
        
        // 处理利润列表
        if (profits.isEmpty()) {
            return 0;
        }
        
        profits.sort(Comparator.reverseOrder());
        
        if (profits.size() == 1) {
            return profits.get(0);
        } else {
            return profits.get(0) + profits.get(1);
        }
    }
}
