import java.util.TreeMap;

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 0 || k == 0) {
            return new int[0];
        }

        TreeMap<Integer, Integer> window = new TreeMap<>();
        int[] result = new int[nums.length - k + 1];

        // 初始化第一个窗口
        for (int i = 0; i < k; i++) {
            window.put(nums[i], window.getOrDefault(nums[i], 0) + 1);
        }
        result[0] = window.lastKey();

        // 滑动窗口
        for (int i = 1; i <= nums.length - k; i++) {
            // 移除离开窗口的元素 nums[i-1]
            int left = nums[i - 1];
            if (window.get(left) == 1) {
                window.remove(left);
            } else {
                window.put(left, window.get(left) - 1);
            }

            // 加入新进入窗口的元素 nums[i+k-1]
            int right = nums[i + k - 1];
            window.put(right, window.getOrDefault(right, 0) + 1);

            // 当前窗口的最大值
            result[i] = window.lastKey();
        }

        return result;
    }
}
