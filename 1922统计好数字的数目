public int countGoodNumbers(long n) {
    long MOD = 1000000007;
    long evenPositions = (n + 1) / 2;  // positions 0, 2, 4... (0-based)
    long oddPositions = n / 2;         // positions 1, 3, 5...
    
    // Calculate 5^evenPositions mod MOD
    long part1 = modPow(5, evenPositions, MOD);
    // Calculate 4^oddPositions mod MOD
    long part2 = modPow(4, oddPositions, MOD);
    
    // Multiply the two parts and take mod again
    long result = (part1 * part2) % MOD;
    
    return (int) result;
}

// Helper method for modular exponentiation
private long modPow(long base, long exponent, long mod) {
    long result = 1;
    base = base % mod;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % mod;
        }
        exponent = exponent >> 1;
        base = (base * base) % mod;
    }
    return result;
}
