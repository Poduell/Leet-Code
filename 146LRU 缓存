class LRUCache {
    Set<Integer> set=new LinkedHashSet<>();
    HashMap<Integer,Integer> map=new HashMap<>();
    int now=0;
    int cap=0;
    public LRUCache(int capacity) {
        cap=capacity;
    }
    
    public int get(int key) {
        if(set.contains(key)){
            set.remove(key);
            set.add(key);

            return map.getOrDefault(key,-1);

        }
        else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
                    
        if(!set.contains(key)&&now==cap){
            int first = set.iterator().next();
            set.remove(first);
            set.add(key);
            map.put(key,value);
            map.remove(first);
        }
        else if(!set.contains(key)){
            set.add(key);
            map.put(key,value);
            now++;
        }
        else{
            map.put(key,value);
            set.remove(key);
            set.add(key);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
