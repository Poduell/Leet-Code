class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;

        // 定义 8 个方向的偏移量
        int[] directions = {-1, 0, 1};

        // 创建一个新的数组存储下一代状态
        int[][] newBoard = new int[m][n];

        // 遍历每个细胞
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighbors = 0;

                // 计算当前细胞的活邻居数量
                for (int x : directions) {
                    for (int y : directions) {
                        if (x == 0 && y == 0) continue; // 跳过自身
                        int newX = i + x;
                        int newY = j + y;

                        // 检查邻居是否在边界内
                        if (newX >= 0 && newX < m && newY >= 0 && newY < n && board[newX][newY] == 1) {
                            liveNeighbors++;
                        }
                    }
                }

                // 根据规则更新下一代状态
                if (board[i][j] == 1) {
                    if (liveNeighbors < 2 || liveNeighbors > 3) {
                        newBoard[i][j] = 0; // 死亡
                    } else {
                        newBoard[i][j] = 1; // 存活
                    }
                } else {
                    if (liveNeighbors == 3) {
                        newBoard[i][j] = 1; // 复活
                    } else {
                        newBoard[i][j] = 0; // 保持死亡
                    }
                }
            }
        }

        // 将下一代状态复制回原数组
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = newBoard[i][j];
            }
        }
    }
}
